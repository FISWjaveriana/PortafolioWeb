# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/Portfolio/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/Portfolio/package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
            path: |
              Portfolio/.next/cache
            key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
            restore-keys: |
              ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Install dependencies
        working-directory: ./Portfolio
        run: |
          pwd
          ls -la
          npm init -y
          # Install Next.js and React
          npm install next@latest react@latest react-dom@latest
          # Install TypeScript and type definitions
          npm install --save-dev typescript @types/react @types/node @types/react-dom
          # Install Tailwind CSS
          npm install --save-dev tailwindcss postcss autoprefixer
          npx tailwindcss init -p
          # Initialize TypeScript configuration
          npx tsc --init
      - name: Build with Next.js
        working-directory: ./Portfolio
        run: |
            # Make sure next.config.js exists and is configured properly
            if [ ! -f "next.config.js" ]; then
              echo "Creating next.config.js to use src directory"
              echo "/** @type {import('next').NextConfig} */
              const nextConfig = {
                reactStrictMode: true,
                swcMinify: true,
                output: 'export',
                images: {
                  unoptimized: true,
                },
                // Configure Next.js to use the src directory
                pageExtensions: ['js', 'jsx', 'ts', 'tsx'],
              }
              
              module.exports = nextConfig" > next.config.js
            fi
            
            # Add build script to package.json
            npm pkg set scripts.build="next build"
            npm pkg set scripts.start="next start"
            npm pkg set scripts.dev="next dev"
            
            # Create tailwind.config.js if it doesn't exist
            if [ ! -f "tailwind.config.js" ]; then
              echo "/** @type {import('tailwindcss').Config} */
              module.exports = {
                content: [
                  './app/**/*.{js,ts,jsx,tsx,mdx}',
                  './pages/**/*.{js,ts,jsx,tsx,mdx}',
                  './components/**/*.{js,ts,jsx,tsx,mdx}',
                ],
                theme: {
                  extend: {},
                },
                plugins: [],
              }" > tailwind.config.js
            fi
            
            # Build the application
            npm run build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./Portfolio/out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4